import logging
import re
import os
import threading
from datetime import datetime, timedelta

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from flask import Flask
from dotenv import load_dotenv

# ---------- Flask (healthcheck –¥–ª—è Railway) ----------
app = Flask(__name__)

@app.route("/")
def health_check():
    return "Mrush1 Bot is running", 200

def run_flask():
    app.run(
        host="0.0.0.0",
        port=int(os.getenv("PORT", 8000)),
        debug=False,
        use_reloader=False
    )

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ö–∞–Ω–∞–ª (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞)
CHANNEL_ID = os.getenv("CHANNEL_ID", "@shop_mrush1")
# –ë–µ—Å–µ–¥–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ)
CHAT_ID = "@chat_mrush1"  # –ü—É–±–ª–∏—á–Ω–∞—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ (—Å–º. https://t.me/chat_mrush1)

START_HOUR = 5
END_HOUR = 20

FORBIDDEN_WORDS = {"—Å—É–∫–∞", "–±–ª—è—Ç—å", "–ø–∏–∑–¥–µ—Ü", "—Ö—É–π", "–µ–±–∞—Ç—å"}
ALLOWED_IMAGE_EXTENSIONS = {".jpg", ".jpeg", ".png", ".gif"}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–∞—Ö –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
user_posts = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
MAIN_MENU = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üÜò –ü–æ–º–æ—â—å")],
        [KeyboardButton("üë®‚Äçüíª –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")],
        [KeyboardButton("üì§ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
    ],
    resize_keyboard=True,
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ¬´–Ω–∞–∑–∞–¥¬ª
BACK_BUTTON = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
    resize_keyboard=True,
)

# Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
SUBSCRIBE_CHECK_KEYBOARD = InlineKeyboardMarkup([
    [
        InlineKeyboardButton("–ö–∞–Ω–∞–ª @shop_mrush1", url="https://t.me/shop_mrush1")
    ],
    [
        InlineKeyboardButton("–ë–µ—Å–µ–¥–∞ @chat_mrush1", url="https://t.me/chat_mrush1")
    ],
    [
        InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
    ]
])

def is_within_working_hours() -> bool:
    now = datetime.now()
    current_time = now.hour + now.minute / 60
    return START_HOUR <= current_time < END_HOUR

async def check_subscriptions(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ –∏ –±–µ—Å–µ–¥–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (True, '') –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –ª–∏–±–æ (False, —Ç–µ–∫—Å—Ç_–æ—à–∏–±–∫–∏).
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª (—Ä–æ—Å—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å public: @shop_mrush1)
    try:
        member_channel = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        if member_channel.status == "kicked":
            return False, "‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
        if member_channel.status not in ["member", "administrator", "creator"]:
            return False, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}: {e}")
        return False, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª."

    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–µ–¥—É (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω–æ–π —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π: @chat_mrush1)
    try:
        member_chat = await context.bot.get_chat_member(chat_id=CHAT_ID, user_id=user_id)
        if member_chat.status == "kicked":
            return False, "‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–µ—Å–µ–¥–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
        if member_chat.status not in ["member", "administrator", "creator"]:
            return False, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –±–µ—Å–µ–¥–µ."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–∏—è –≤ –±–µ—Å–µ–¥–µ {CHAT_ID}: {e}")
        return False, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–µ—Å–µ–¥–µ."

    return True, ""

def check_post_limit_and_duplicates(user_id: int, text: str) -> tuple[bool, str]:
    now = datetime.now()
    if user_id not in user_posts:
        user_posts[user_id] = {"posts": [], "count": 0, "date": now}
        return True, ""

    user_data = user_posts[user_id]
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫, –µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if now.date() != user_data["date"].date():
        user_posts[user_id] = {"posts": [], "count": 0, "date": now}

    if user_posts[user_id]["count"] >= 3:
        return False, "‚ùå –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –≤ 3 –ø–æ—Å—Ç–∞ –∑–∞ —Å—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."

    for post, post_time in user_data["posts"]:
        if post.strip() == text.strip():
            time_diff = now - post_time
            if time_diff < timedelta(days=1):
                hours_left = 24 - time_diff.total_seconds() // 3600
                return False, f"‚ùå –≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª—Å—è. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ {int(hours_left)} —á."

    return True, ""

def add_successful_post(user_id: int, text: str):
    now = datetime.now()
    user_data = user_posts[user_id]
    user_data["posts"].append([text, now])
    user_data["count"] += 1
    user_data["date"] = now

def check_message(text: str, user_username: str) -> tuple[bool, str]:
    text_lower = text.lower()
    user_username = (user_username or "").lower()

    # –ï—Å—Ç—å –ª–∏ #–æ—Ñ—Ç–æ–ø
    is_offtopic = any(hashtag in text_lower for hashtag in ["#–æ—Ñ—Ç–æ–ø", "#–æ—Ñ—Ñ—Ç–æ–ø"])
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ @username (—Å–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º/–ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º)
    usernames = re.findall(r"@([a-zA-Z0-9_]{5,})", text)
    if not usernames:
        return False, "‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (@username)."

    if not is_offtopic:
        actions = ["–ø—Ä–æ–¥–∞–º", "–æ–±–º–µ–Ω", "–∫—É–ø–ª—é", "–ø—Ä–æ–¥–∞—é", "–æ–±–º–µ–Ω—è—é", "–ø–æ–∫—É–ø–∫–∞", "–ø—Ä–æ–¥–∞–∂–∞"]
        if not any(action in text_lower for action in actions):
            return False, "‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: '–ø—Ä–æ–¥–∞–º', '–æ–±–º–µ–Ω' –∏–ª–∏ '–∫—É–ø–ª—é'."

        mail_keywords = [
            "–ø–æ—á—Ç–∞", "–ø–æ—á—Ç—É", "–ø–æ—á—Ç—ã", "—É–∫–∞–∑", "—É—Ç–µ—Ä", "—É—Ç–µ—Ä—å", "—É—Ç–µ—Ä—è",
            "–æ–∫–∏", "–æ–∫ —Ä—É", "–æ–∫.—Ä—É", "–æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏", "—Å–ø–∞–∫–µ—Å", "–æ–¥–Ω–æ–∫–ª–∞—Å–Ω–∏–∫–∏",
            "–æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞", "–æ–¥–Ω–æ–∫–ª–∞—Å–Ω–∏–∫–∞", "–æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤", "–æ–¥–Ω–æ–∫–ª–∞—Å–Ω–∏–∫–æ–≤",
            "—Å–ø–µ–π—Å–∏—Å", "—Å–ø–∞–∫–µ—Å", "spaces",
        ]
        if not any(keyword in text_lower for keyword in mail_keywords):
            return False, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—è–∑–∫–∞—Ö."

    # –õ–∏–º–∏—Ç –∫–∞–ø—Å–∞
    if len(text) > 10 and (sum(c.isupper() for c in text) / len(text) > 0.7):
        return False, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (–∫–∞–ø—Å)."

    # –ú–∞—Ç
    if any(word in text_lower for word in FORBIDDEN_WORDS):
        return False, "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ç. –£–±–µ—Ä–∏—Ç–µ –µ–≥–æ."

    # –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–∫—Ä–æ–º–µ t.me/shop_mrush1)
    if re.search(r"(https?://|www\.|\.com|\.ru|\.org|t\.me/[a-zA-Z0-9_]+)", text) and not re.search(r"t\.me/shop_mrush1", text):
        return False, "‚ùå –°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã (–∫—Ä–æ–º–µ t.me/shop_mrush1)."

    # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–æ–≤
    if re.search(r"@[a-zA-Z0-9_]*bot\b", text_lower):
        return False, "‚ùå –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω—ã."

    # –õ–∏—à–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —á—É–∂–∏—Ö @username
    for username in usernames:
        username_lower = username.lower()
        if username_lower.endswith("bot"):
            continue
        if username_lower not in [user_username, "vardges_grigoryan"]:
            return False, f"‚ùå –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ @{username} –∑–∞–ø—Ä–µ—â–µ–Ω–æ. –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (@–≤–∞—à_–Ω–∏–∫)."

    return True, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."

def check_file_extension(file_name: str) -> bool:
    if not file_name:
        return False
    return any(file_name.lower().endswith(ext) for ext in ALLOWED_IMAGE_EXTENSIONS)

# ---------- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ----------
async def send_welcome_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –¥–≤–∞ –±–ª–æ–∫–∞
    greeting_part1 = (
        "ü§ñ *–ü—Ä–∏–≤–µ—Ç, —è Mrush1* ‚Äî –±–æ—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ *–ø–æ–∫—É–ø–∫–µ, –ø—Ä–æ–¥–∞–∂–µ –∏ –æ–±–º–µ–Ω–µ –∏–≥—Ä–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤*!\n\n"
        "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞:\n"
        f"‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {CHANNEL_ID}\n"
        f"‚Ä¢ –ë–µ—Å–µ–¥—É: {CHAT_ID}\n"
        "–ò —Ç–æ–ª—å–∫–æ –∑–∞—Ç–µ–º –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n\n"
        "üìù –ö–∞–∫ –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n"
        "1) –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´üì§ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ¬ª.\n"
        "2) –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (+ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ).\n"
        "3) –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–æ—Å—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º.\n"
        "4) –ë–æ—Ç –æ–ø—É–±–ª–∏–∫—É–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ, –µ—Å–ª–∏ –≤—Å—ë –û–ö.\n"
    )

    greeting_part2 = (
    "üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º</b>:\n"
    "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ø—Ä–æ–¥–∞–º, –æ–±–º–µ–Ω, –∫—É–ø–ª—é) –∏–ª–∏ #–æ—Ñ—Ñ—Ç–æ–ø.\n"
    "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ / –±—é–¥–∂–µ—Ç–µ.\n"
    "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Å –ø–æ—á—Ç–æ–π (–µ—Å—Ç—å/—É—Ç–µ—Ä—è–Ω–∞/–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—é).\n"
    "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–ø—Å –∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.\n"
    "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω—ã —Å—Å—ã–ª–∫–∏ (–∫—Ä–æ–º–µ t.me/shop_mrush1) –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —á—É–∂–∏—Ö @username.\n"
    "‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π @–∫–æ–Ω—Ç–∞–∫—Ç.\n\n"
    "–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å –ø—Ä–∞–≤–∏–ª —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Å–∞–º–æ–º –∫–∞–Ω–∞–ª–µ:\n"
    'üîó <a href="https://t.me/shop_mrush1/11">–ü—Ä–∞–≤–∏–ª–∞ –ø–ª–æ—â–∞–¥–∫–∏</a>\n'
    'üîó <a href="https://t.me/shop_mrush1/13">–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É</a>\n'
)

    await context.bot.send_message(
        chat_id=chat_id,
        text=greeting_part1,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=MAIN_MENU,
    )
    await context.bot.send_message(
        chat_id=chat_id,
        text=greeting_part2,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

    # –ü—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        with open("primerbot.jpg", "rb") as photo:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=(
                    "–ü—Ä–∏–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n"
                    "¬´–ü—Ä–æ–¥–∞–º –∑–∞ 100‚ÇΩ –∏–ª–∏ –æ–±–º–µ–Ω—è—é –Ω–∞ –∞–∫–∫ –ø–æ—Å–∏–ª—å–Ω–µ–µ —Å –º–æ–µ–π –¥–æ–ø–ª–∞—Ç–æ–π. "
                    "–ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –ø–æ—á—Ç—É. "
                    "–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏: @vardges_grigoryan¬ª"
                ),
            )
    except FileNotFoundError:
        await context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ ----------
async def handle_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    user = msg.from_user
    user_id = user.id
    user_username = user.username or ""
    text = (msg.text or msg.caption or "").strip()

    if not is_within_working_hours():
        current_time = datetime.now().strftime("%H:%M")
        await msg.reply_text(
            f"‚è∞ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å {START_HOUR}:00 –¥–æ {END_HOUR}:00. –°–µ–π—á–∞—Å {current_time}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ —Å {START_HOUR}:00.",
            reply_markup=MAIN_MENU,
        )
        return

    # –ü–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –µ—â—ë —Ä–∞–∑ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
    subscriptions_ok, subscriptions_msg = await check_subscriptions(context, user_id)
    if not subscriptions_ok:
        await msg.reply_text(
            f"{subscriptions_msg}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –±–µ—Å–µ–¥—É –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª:",
            reply_markup=SUBSCRIBE_CHECK_KEYBOARD,
        )
        return

    if not text:
        await msg.reply_text("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ).", reply_markup=MAIN_MENU)
        return

    # –õ–∏–º–∏—Ç –∏ –¥—É–±–ª–∏
    limit_ok, limit_msg = check_post_limit_and_duplicates(user_id, text)
    if not limit_ok:
        await msg.reply_text(limit_msg, reply_markup=MAIN_MENU)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content_ok, content_msg = check_message(text, user_username)
    if not content_ok:
        await msg.reply_text(content_msg, reply_markup=MAIN_MENU)
        return

    photos = msg.photo or []
    document = msg.document

    if document and not check_file_extension(document.file_name):
        await msg.reply_text(
            "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–∞–π–ª—ã. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ JPG, JPEG, PNG, GIF.",
            reply_markup=MAIN_MENU,
        )
        return

    try:
        if photos:
            await context.bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=photos[-1].file_id,
                caption=text
            )
        elif document:
            await context.bot.send_document(
                chat_id=CHANNEL_ID,
                document=document.file_id,
                caption=text
            )
        else:
            await context.bot.send_message(chat_id=CHANNEL_ID, text=text)

        add_successful_post(user_id, text)
        await msg.reply_text("‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=MAIN_MENU)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        await msg.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.",
            reply_markup=MAIN_MENU
        )

# ---------- –ö–æ–º–∞–Ω–¥—ã / –∫–æ–ª–±—ç–∫–∏ / —Å–æ–æ–±—â–µ–Ω–∏—è ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç /start.
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª @shop_mrush1 –∏ –±–µ—Å–µ–¥—É @chat_mrush1.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    –ï—Å–ª–∏ –¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ–Ω—é.
    """
    user_id = update.effective_user.id

    if not is_within_working_hours():
        current_time = datetime.now().strftime("%H:%M")
        await update.message.reply_text(
            f"‚è∞ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å {START_HOUR}:00 –¥–æ {END_HOUR}:00. –°–µ–π—á–∞—Å {current_time}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    subscriptions_ok, subscriptions_msg = await check_subscriptions(context, user_id)
    if not subscriptions_ok:
        await update.message.reply_text(
            f"{subscriptions_msg}\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=SUBSCRIBE_CHECK_KEYBOARD
        )
        return

    await send_welcome_message(context, update.effective_chat.id)

async def contact_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_within_working_hours():
        await update.message.reply_text(
            f"‚è∞ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å {START_HOUR}:00 –¥–æ {END_HOUR}:00. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    await update.message.reply_text(
        "üë®‚Äçüíª –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @vardges_grigoryan",
        reply_markup=BACK_BUTTON,
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_within_working_hours():
        await update.message.reply_text(
            f"‚è∞ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å {START_HOUR}:00 –¥–æ {END_HOUR}:00. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    # –£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π help-—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å
    help_text = (
    "üìå <b>–ö–∞–∫ –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n"
    f"1. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –∑–∞–π–¥–∏—Ç–µ –≤ –±–µ—Å–µ–¥—É:\n   ‚Ä¢ {CHANNEL_ID}\n   ‚Ä¢ {CHAT_ID}\n"
    "2. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –±–æ—Ç —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏–ª—Å—è, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã.\n"
    "3. –ù–∞–∂–º–∏—Ç–µ ¬´üì§ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ¬ª.\n"
    "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –±–æ—Ç—É.\n"
    "5. –ì–æ—Ç–æ–≤–æ ‚Äî –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã.\n\n"
    "üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:</b>\n"
    "- –£–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ (–ø—Ä–æ–¥–∞–º/–∫—É–ø–ª—é/–æ–±–º–µ–Ω) –∏–ª–∏ #–æ—Ñ—Ñ—Ç–æ–ø.\n"
    "- –£–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Å –ø–æ—á—Ç–æ–π (–µ—Å–ª–∏ –ø–æ –∏–≥—Ä–µ).\n"
    "- –ó–∞–ø—Ä–µ—â—ë–Ω –º–∞—Ç, –∫–∞–ø—Å, —Å—Å—ã–ª–∫–∏ (–∫—Ä–æ–º–µ t.me/shop_mrush1).\n"
    "- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –≤–∞—à @username.\n\n"
    "–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å –ø—Ä–∞–≤–∏–ª —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Å–∞–º–æ–º –∫–∞–Ω–∞–ª–µ:\n"
    'üîó <a href="https://t.me/shop_mrush1/11">–ü—Ä–∞–≤–∏–ª–∞ –ø–ª–æ—â–∞–¥–∫–∏</a>\n'
    'üîó <a href="https://t.me/shop_mrush1/13">–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É</a>\n'
)
    await update.message.reply_text(help_text, parse_mode="HTML", reply_markup=BACK_BUTTON)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    text = msg.text

    if text == "üë®‚Äçüíª –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É":
        await contact_admin(update, context)
        return
    if text == "üÜò –ü–æ–º–æ—â—å":
        await show_help(update, context)
        return
    if text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await msg.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_MENU)
        context.user_data["awaiting_post"] = False
        return
    if text == "üì§ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
        await msg.reply_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∞–∫–∫–∞—É–Ω—Ç–∞.",
            reply_markup=BACK_BUTTON,
        )
        context.user_data["awaiting_post"] = True
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª ¬´–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ¬ª
    if context.user_data.get("awaiting_post", False):
        await handle_post(update, context)
        context.user_data["awaiting_post"] = False
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ—Å—Ç
    if msg.photo or msg.document:
        await handle_post(update, context)
        return

    # –ò–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    await msg.reply_text("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=MAIN_MENU)

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "check_subscription":
        user_id = query.from_user.id
        subscriptions_ok, subscriptions_msg = await check_subscriptions(context, user_id)
        if subscriptions_ok:
            await query.edit_message_text("‚úÖ –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–∞ —á–∞—Ç–∞.")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç
            await send_welcome_message(context, query.message.chat.id)
        else:
            await query.edit_message_text(
                text=(
                    f"{subscriptions_msg}\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª —Å–Ω–æ–≤–∞."
                ),
                reply_markup=SUBSCRIBE_CHECK_KEYBOARD
            )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception(f"–û—à–∏–±–∫–∞: {context.error}")

# ---------- main ----------
def main():
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ PTB
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(callback_query_handler))
    application.add_handler(
        MessageHandler(filters.TEXT | filters.PHOTO | filters.Document.IMAGE, handle_message)
    )
    application.add_error_handler(error_handler)

    logger.info("–ó–∞–ø—É—Å–∫ polling (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)...")
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()
